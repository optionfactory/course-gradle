//repositories define where to go and search for dependencies
repositories{
    //Maven Central is the most common one
    mavenCentral()
    //Google's maven repo
    google()
    //Local maven repo. Avoid using this, kills reproducibility
    mavenLocal()
    //Folder of dependencies (no dependency resolution possible)
    flatDir {
        dirs '~/.m2/repository'
    }
    //Custom maven repo
    maven {
        url "https://repo.spring.io/release"
    }
    //... and many others
}

//Configurations are bundles of files.
configurations {
    //Creates a configuration named "innerConf"
    innerConf{
        // This configuration is an "outgoing" configuration, it's not meant to be resolved
        // A dependency graph cannot be computed
        canBeResolved = false
        // Can be seen and referenced from other projects which reference this
        canBeConsumed = true
    }

    // Resolvable configuration named "innerConf", which extends the other one
    finalConf.extendsFrom innerConf
}

//Effective dependencies, assigned to specific configurations
dependencies {
    //adds junit dependency to the "innerConf" configuration
    innerConf('commons-logging:commons-logging:1.2') {
        transitive=false
        // version {
        //     strictly '1.1.3'
        // }
    }
    //Alternative dependency coordinates format
    // finalConf group: 'org.springframework', name:'spring-core', version:'4.1.1.RELEASE'
    finalConf(group: 'org.springframework', name:'spring-core', version:'4.1.1.RELEASE')
//     {
//         exclude group: 'commons-logging', module: 'commons-logging'
//     }
}
tasks.register('copyDeps', Copy) {
    group "Actions"
    description "Copies dependencies to target folder"
    //copies all files referenced by this configuration
    from configurations.finalConf
    into 'deps'
}

tasks.register('clean') {
    group "Actions"
    description "Cleans dependencies copied to target folder"
    delete fileTree('deps')
}

task printConfs {
    group "Help"
    description "Inspects the configurations hierarchy"
    ext.buildConfsDetails= {String prefix, confs->
        def res = ""
        res+="""[
"""
        confs.each {
            def subConfs = buildConfsDetails("${prefix}     ",it.getExtendsFrom())
            res=res+ """\
${prefix}  ${it.name}: {
${prefix}    resolvable: ${it.canBeResolved},
${prefix}    transitive: ${it.transitive},
${prefix}    visible: ${it.visible},
${prefix}    extendsFrom: ${it.getExtendsFrom()?subConfs:"-"}
${prefix}  },
"""
            }
            res+= "${prefix}]"        
    }
    doLast {
        println buildConfsDetails("", project.configurations)
    }
}

//Dependencies can also be imported to be used within the script itself:

buildscript {
   repositories{
       mavenCentral()
   }
   dependencies {
       classpath group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
   }
}
